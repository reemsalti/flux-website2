{"version":3,"sources":["components/postprocessing/DistortionPass.tsx","utils/file.ts","components/postprocessing/ripple.ts","components/postprocessing/RipplePass.tsx","components/Effect.tsx","components/ImagePlane.tsx","components/images/logo.png","components/TCanvas.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["extend","ShaderPass","DistortionPass","props","enabled","progress","scale","distortionRef","useRef","shader","useMemo","uniforms","tDiffuse","value","u_time","u_progress","u_scale","vertexShader","fragmentShader","useFrame","current","ref","attachArray","args","publicPath","path","process","RippleRenderer","_texture","_scene","_target","_camera","_meshs","_max","_frequency","_mouse","THREE","_prevMouse","_currentWave","_cameraProps","frustumSize","window","innerHeight","width","innerWidth","height","near","far","_createMesh","geometry","material","map","transparent","blending","depthTest","depthWrite","i","mesh","clone","rotateZ","Math","PI","random","visible","add","push","_handleMouseMove","e","x","clientX","y","clientY","_handleResize","left","right","top","bottom","updateProjectionMatrix","setSize","_setNewWave","position","set","opacity","_trackMousePos","distance","distanceTo","update","gl","uTexture","setRenderTarget","render","texture","clear","forEach","rotation","z","dispose","removeEventListener","this","addEventListener","RipplePass","fallback","Ripple","shaderRef","rippleTexture","useTexture","effect","u_displacement","useEffect","EffectComposer","RenderPass","Effect","dist_datas","useControls","min","max","step","ripple_datas","composerRef","useThree","scene","camera","size","ImagePlane","name","textures","u_texture","TCanvas","style","fov","aspect","dpr","devicePixelRatio","attach","ScrollControls","pages","damping","horizontal","infinite","Preload","html","display","zIndex","justifyContent","src","fluxLogo","alt","App","className","alignItems","fontFamily","color","fontSize","hidden","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28509107.chunk.js","sourcesContent":["import { useMemo, useRef, VFC } from 'react';\nimport { ShaderPass } from 'three-stdlib';\nimport { extend, useFrame } from '@react-three/fiber';\n\nextend({ ShaderPass })\n\ntype DistortionPassType = {\n\tenabled?: boolean\n\tprogress?: number\n\tscale?: number\n}\n\nexport const DistortionPass: VFC<DistortionPassType> = props => {\n\tconst { enabled = true, progress = 1, scale = 1 } = props\n\n\tconst distortionRef = useRef<ShaderPass>(null)\n\n\tconst shader: THREE.Shader = useMemo(() => {\n\t\treturn {\n\t\t\tuniforms: {\n\t\t\t\ttDiffuse: { value: null },\n\t\t\t\tu_time: { value: 0 },\n\t\t\t\tu_progress: { value: 0 },\n\t\t\t\tu_scale: { value: 1 }\n\t\t\t},\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader\n\t\t}\n\t}, [])\n\n\tuseFrame(() => {\n\t\tdistortionRef.current!.uniforms.u_time.value += 0.003\n\t})\n\n\treturn (\n\t\t<shaderPass\n\t\t\tref={distortionRef}\n\t\t\tattachArray=\"passes\"\n\t\t\targs={[shader]}\n\t\t\tenabled={enabled}\n\t\t\tuniforms-u_progress-value={progress}\n\t\t\tuniforms-u_scale-value={scale}\n\t\t/>\n\t)\n}\n\n// --------------------------------------------------------\nconst vertexShader = `\nvarying vec2 v_uv;\n\nvoid main() {\n  v_uv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`\n\nconst fragmentShader = `\nuniform sampler2D tDiffuse;\nuniform float u_time;\nuniform float u_progress;\nuniform float u_scale;\nvarying vec2 v_uv;\n\nvoid main() {\n  vec2 uv = v_uv;\n\n  vec2 p = 2.0 * v_uv - 1.0; // -1 ~ 1\n  p += 0.1 * cos(u_scale * 3.7 * p.yx + 1.4 * u_time + vec2(2.2, 3.4));\n  p += 0.1 * cos(u_scale * 3.0 * p.yx + 1.0 * u_time + vec2(1.2, 3.4));\n  p += 0.3 * cos(u_scale * 5.0 * p.yx + 2.6 * u_time + vec2(4.2, 1.4));\n  p += 0.3 * cos(u_scale * 7.5 * p.yx + 3.6 * u_time + vec2(12.2, 3.4));\n\n\tuv.x = mix(v_uv.x, length(p), u_progress);\n  uv.y = mix(v_uv.y, 0.5 * length(p) + 0.15, u_progress);\n  \n  vec4 color = texture2D(tDiffuse, uv);\n  \n  gl_FragColor = color;\n  // gl_FragColor = vec4(vec3(length(p)), 1.0);\n}\n`\n","export const publicPath = (path: string) => {\n\treturn process.env.PUBLIC_URL + path\n}\n","import * as THREE from 'three';\n\nexport class RippleRenderer {\n\tprivate _scene: THREE.Scene\n\tprivate _target: THREE.WebGLRenderTarget\n\tprivate _camera: THREE.OrthographicCamera\n\tprivate _meshs: THREE.Mesh[] = []\n\t/** maximum # of ripples drawn */\n\tprivate _max = 100\n\t/**  How much the mouse should move in one frame before drawing  */\n\tprivate _frequency = 3\n\t/** mouse coordinates */\n\tprivate _mouse = new THREE.Vector2(0, 0)\n\t/** mouse coordinates in previous frame */\n\tprivate _prevMouse = new THREE.Vector2(0, 0)\n\t/** index of ripples drawn on the current frame */\n\tprivate _currentWave = 3\n\n\t/**\n\t * コンストラクタ\n\t * @param _texture 波紋のテクスチャー\n\t */\n\tconstructor(private _texture: THREE.Texture) {\n\t\tthis._scene = new THREE.Scene()\n\t\tthis._target = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight)\n\t\t// camera\n\t\tconst { width, height, near, far } = this._cameraProps()\n\t\tthis._camera = new THREE.OrthographicCamera(-width, width, height, -height, near, far)\n\t\tthis._camera.position.set(0, 0, 0)\n\t\t// mesh\n\t\tthis._createMesh()\n\t\t// events\n\t\twindow.addEventListener('mousemove', this._handleMouseMove)\n\t\twindow.addEventListener('resize', this._handleResize)\n\t}\n\n\tprivate _cameraProps = () => {\n\t\tconst frustumSize = window.innerHeight\n\t\tconst aspect = window.innerWidth / window.innerHeight\n\t\tconst [w, h] = [(frustumSize * aspect) / 2, frustumSize / 2]\n\t\treturn { width: w, height: h, near: -1000, far: 1000 }\n\t}\n\n\tprivate _createMesh = () => {\n\t\tconst size = 64\n\t\tconst geometry = new THREE.PlaneGeometry(size, size)\n\t\tconst material = new THREE.MeshBasicMaterial({\n\t\t\tmap: this._texture,\n\t\t\ttransparent: true,\n\t\t\tblending: THREE.AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t})\n\t\tfor (let i = 0; i < this._max; i++) {\n\t\t\tconst mesh = new THREE.Mesh(geometry.clone(), material.clone())\n\t\t\tmesh.rotateZ(2 * Math.PI * Math.random())\n\t\t\tmesh.visible = false\n\t\t\tthis._scene.add(mesh)\n\t\t\tthis._meshs.push(mesh)\n\t\t}\n\t}\n\n\tprivate _handleMouseMove = (e: MouseEvent) => {\n\t\tthis._mouse.x = e.clientX - window.innerWidth / 2\n\t\tthis._mouse.y = window.innerHeight / 2 - e.clientY\n\t}\n\n\tprivate _handleResize = () => {\n\t\tconst { width, height } = this._cameraProps()\n\t\tthis._camera.left = -width\n\t\tthis._camera.right = width\n\t\tthis._camera.top = height\n\t\tthis._camera.bottom = -height\n\t\tthis._camera.updateProjectionMatrix()\n\t\tthis._target.setSize(window.innerWidth, window.innerHeight)\n\t}\n\n\tprivate _setNewWave = () => {\n\t\tconst mesh = this._meshs[this._currentWave]\n\t\tmesh.visible = true\n\t\tmesh.position.set(this._mouse.x, this._mouse.y, 0)\n\t\tmesh.scale.x = mesh.scale.y = 0.2\n\t\t;(mesh.material as THREE.MeshBasicMaterial).opacity = 0.4\n\t}\n\n\tprivate _trackMousePos = () => {\n\t\t// 今のマウス座標と前回のフレームのマウス座標の距離\n\t\tconst distance = this._mouse.distanceTo(this._prevMouse)\n\t\tif (this._frequency < distance) {\n\t\t\tthis._setNewWave()\n\t\t\tthis._currentWave = (this._currentWave + 2) % this._max\n\t\t\t// console.log(this._currentWave)\n\t\t}\n\t\tthis._prevMouse.x = this._mouse.x\n\t\tthis._prevMouse.y = this._mouse.y\n\t}\n\n\t/**\n\t * 描画を更新する\n\t * @param gl メインレンダラー\n\t * @param uTexture 波紋の描画結果を格納するuniform\n\t */\n\tupdate = (gl: THREE.WebGLRenderer, uTexture: THREE.IUniform<any>) => {\n\t\tthis._trackMousePos()\n\n\t\tgl.setRenderTarget(this._target)\n\t\tgl.render(this._scene, this._camera)\n\t\tuTexture.value = this._target.texture\n\t\tgl.setRenderTarget(null)\n\t\tgl.clear()\n\n\t\tthis._meshs.forEach(mesh => {\n\t\t\tif (mesh.visible) {\n\t\t\t\tconst material = mesh.material as THREE.MeshBasicMaterial\n\t\t\t\tmesh.rotation.z += 0.12\n\t\t\t\tmaterial.opacity *= 0.97\n\t\t\t\tmesh.scale.x = 0.98 * mesh.scale.x + 0.20\n\t\t\t\tmesh.scale.y = mesh.scale.x\n\t\t\t\tif (material.opacity < 0.002) mesh.visible = false\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * destroy the instance\n\t */\n\tdispose = () => {\n\t\twindow.removeEventListener('mousemove', this._handleMouseMove)\n\t\twindow.removeEventListener('resize', this._handleResize)\n\t}\n}\n","import React, { Suspense, useEffect, useMemo, useRef, VFC } from 'react';\nimport { ShaderPass } from 'three-stdlib';\nimport { useTexture } from '@react-three/drei';\nimport { extend, useFrame } from '@react-three/fiber';\nimport { publicPath } from '../../utils/file';\nimport { RippleRenderer } from './ripple';\n\nextend({ ShaderPass })\n\ntype RipplePassType = {\n\tenabled?: boolean\n}\n\nexport const RipplePass: VFC<RipplePassType> = props => {\n\tconst { enabled = true } = props\n\n\treturn (\n\t\t<Suspense fallback={null}>\n\t\t\t<Ripple enabled={enabled} />\n\t\t</Suspense>\n\t)\n}\n\n// ========================================================\ntype RippleType = {\n\tenabled?: boolean\n}\n\nconst Ripple: VFC<RippleType> = props => {\n\tconst { enabled = true } = props\n\n\tconst shaderRef = useRef<ShaderPass>(null)\n\n\tconst rippleTexture = useTexture(publicPath('/assets/textures/brush.png'))\n\tconst effect = useMemo(() => new RippleRenderer(rippleTexture), [rippleTexture])\n\n\tconst shader: THREE.Shader = useMemo(() => {\n\t\treturn {\n\t\t\tuniforms: {\n\t\t\t\ttDiffuse: { value: null },\n\t\t\t\tu_displacement: { value: null }\n\t\t\t},\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader\n\t\t}\n\t}, [])\n\n\tuseEffect(() => {\n\t\treturn () => effect.dispose()\n\t}, [effect])\n\n\tuseFrame(({ gl }) => {\n\t\teffect.update(gl, shaderRef.current!.uniforms.u_displacement)\n\t})\n\n\treturn <shaderPass ref={shaderRef} attachArray=\"passes\" args={[shader]} enabled={enabled} />\n}\n\n// --------------------------------------------------------\nconst vertexShader = `\nvarying vec2 v_uv;\n\nvoid main() {\n  v_uv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`\n\nconst fragmentShader = `\nuniform sampler2D tDiffuse;\nuniform sampler2D u_displacement;\nvarying vec2 v_uv;\n\nfloat PI = 3.141592653589;\n\nvoid main() {\n  vec2 uv = v_uv;\n\n  vec4 disp = texture2D(u_displacement, uv);\n  float theta = disp.r * 2.0 * PI;\n  vec2 dir = vec2(sin(theta), cos(theta));\n  uv += dir * disp.r * 0.1;\n\n  vec4 color = texture2D(tDiffuse, uv);\n\n  gl_FragColor = color;\n  // gl_FragColor = texture2D(u_displacement, v_uv);\n}\n`\n","import { useControls } from 'leva';\n\nimport React, { useEffect, useRef, VFC } from 'react';\nimport { EffectComposer, RenderPass, ShaderPass } from 'three-stdlib';\nimport { extend, useFrame, useThree } from '@react-three/fiber';\nimport { DistortionPass } from './postprocessing/DistortionPass';\nimport { RipplePass } from './postprocessing/RipplePass';\n\nextend({ EffectComposer, RenderPass, ShaderPass })\n\n\nexport const Effect: VFC = () => {\n\tconst dist_datas = useControls('Distortion', {\n\t\tenabled: true,\n\t\tprogress: { value: 0, min: 0.80, max: 0.90, step: 0.01 },\n\t\tscale: { value: 1, min: 0.3, max: 0.9, step: 0.01 },\n\t\t\n\t})\n\n\tconst ripple_datas = useControls('Ripple', {\n\t\tenabled: true,\n\t\t\n\t})\n\n\t\n\n\tconst composerRef = useRef<EffectComposer>(null)\n\tconst { gl, scene, camera, size } = useThree()\n\n\tuseEffect(() => {\n\t\tcomposerRef.current!.setSize(size.width, size.height)\n\t}, [size])\n\n\tuseFrame(() => {\n\t\tcomposerRef.current!.render()\n\t}, 1)\n\n\treturn (\n\t\t<effectComposer ref={composerRef} args={[gl]}>\n\t\t\t<renderPass attachArray=\"passes\" args={[scene, camera]} />\n\t\t\t<DistortionPass {...dist_datas} />\n\t\t\t<RipplePass {...ripple_datas} />\n\t\t\t\n\t\t</effectComposer>\n\t\t\n\t)\n}\n","import React, { VFC } from 'react';\nimport * as THREE from 'three';\nimport { Plane, useTexture } from '@react-three/drei';\nimport { publicPath } from '../utils/file';\n\nexport const ImagePlane: VFC = () => {\n\tconst path = (name: string) => publicPath(`/assets/images/${name}.jpg`)\n\tconst textures = useTexture([path('fluxcolors'), path('fluxcolors2')])\n\n\tconst material = (texture: THREE.Texture) =>\n\t\tnew THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\tu_texture: { value: texture }\n\t\t\t\t\n\t\t\t},\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader\n\t\t\t\n\t\t})\n\n\treturn (\n\t\t<>\n\t\t\t{textures.map((texture, i) => (\n\t\t\t\t<Plane key={i} args={[0.4, 33 * (615 / 900)]} material={material(texture)} scale={0.9} position={[i - 1, 0, 0]} />\n\t\t\t))}\n\t\t\n\t\t</>\n\t)\n}\n\n// --------------------------------------------------------\nconst vertexShader = `\nvarying vec2 v_uv;\n\nvoid main() {\n  v_uv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`\n\nconst fragmentShader = `\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\n\nvoid main() {\n  vec4 color = texture2D(u_texture, v_uv);\n  gl_FragColor = color;\n}\n`\n","export default __webpack_public_path__ + \"static/media/logo.a920a425.png\";","\nimport React, { Suspense, VFC } from 'react';\nimport { Preload } from '@react-three/drei';\nimport { Canvas } from '@react-three/fiber';\nimport { Effect } from './Effect';\nimport { ImagePlane } from './ImagePlane';\nimport { Scroll, ScrollControls } from \"@react-three/drei\";\nimport { Home } from './Home';\nimport fluxLogo from './images/logo.png'\n\nimport './Home.css'\n//import grain from './images/grain5.gif';\nimport Footer from './Footer/Footer';\n//import { OrbitControls } from '@react-three/drei';\n\n\nexport const TCanvas: VFC = () => {\n\treturn (\n\t\t\n\t\t<Canvas style={{ position: 'relative'}}\n\t\t\t camera={{\n\t\t\t\tposition: [0, 3, 1],\n\t\t\t\tfov: 10,\n\t\t\t\taspect: window.innerWidth / window.innerHeight,\n\t\t\t\tnear: 0.1,\n\t\t\t\tfar: 2000\n\t\t\t}}\n\t\t\tdpr={window.devicePixelRatio}>\n\t\t\t{/* canvas color */}\n\t\t\t<color attach=\"background\" args={['#1c1c1c']} />\n\t\t\t{/* camera controller */}\n\t\t\t{/* <OrbitControls attach=\"orbitControls\" /> */}\n\t\t\t{/* helper */}\n\t\t\t{/* <Stats /> */}\n\t\t\t{/* object */}\n\t\t\t<Suspense fallback={null}>\n\t\t\t<ScrollControls\n\t\t\tpages={1} // Each page takes 100% of the height of the canvas\n\t\t\tdistance={1} // A factor that increases scroll bar travel (default: 1)\n\t\t\tdamping={4} // Friction, higher is faster (default: 4)\n\t\t\thorizontal={false} // Can also scroll horizontally (default: false)\n\t\t\tinfinite={false} // Can also scroll infinitely (default: false)\n\t\t\t><ImagePlane/>\n\t\t\t<Preload/>\n\t\t\t\t<Scroll html>\n\t\t\t\t<img style={{display: 'flex', position: \"absolute\", width: \"50rem\", height: \"40rem\", zIndex: '1', bottom: '0', right: \"0\", justifyContent: 'center'}} src={fluxLogo} alt=''/>\n\t\t\t\t</Scroll>\n\t\t\t</ScrollControls>\n\n\t\t\t\t\n\t\t\t</Suspense>\n\t\t\t<Preload/>\n\t\t\t<Effect />\n\t\t\t\n\t\t</Canvas>\n\t\t\n\t\t\n\t\t\n\t)\n}\n","import { Leva } from 'leva';\nimport React, {VFC } from 'react';\nimport { TCanvas } from './TCanvas';\nimport { HashRouter, Routes, Route } from 'react-router-dom';\nimport './App.css';\nimport fluxLogo from './images/logo.png'\n//import grain from './images/grain5.gif'\n\nexport const App: VFC =  () => {\n\n\treturn (\n\t\t<>\n\t\t\n\t\t<div className='wrapper' style={{ position: 'absolute', width: '100vw', height: '100vh', top:'0', alignItems: 'center', justifyContent: 'center', display: 'flex' }}>\n\t\t<div className='wrapper' style={{ position: 'absolute', width: '100vw', height: '100vh', top:'0', alignItems: 'center', justifyContent: 'center', display: 'flex' }}></div>\n\t\t<img style={{display: 'flex', position: \"absolute\", width: \"35rem\", height: \"30rem\", zIndex: '1', justifyContent: 'center', alignItems: 'center'}} src={fluxLogo} alt=''/>\n\t\t<p style={{fontFamily: 'Aldrich', display: 'flex', position: 'absolute', zIndex: \"2\", color: '#fff', fontSize: '3rem', bottom: '10%'}}>COMING SOON</p>\n\t\t<div/>\n\t\t\t<Leva hidden/>\n\t\t\t\n\t\t\t\t<TCanvas/>\n\t\t\t\n\t\t</div>\n\t\t\n\t\t</>\n\t)\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App/>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}